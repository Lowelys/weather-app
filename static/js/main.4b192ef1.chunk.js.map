{"version":3,"sources":["api/axios-instance.js","redux/weatherData.js","components/buttonSourse.js","components/form.js","components/weather.js","components/info.js","redux/selectors.js","components/weatherApp.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["API","city","key","axios","get","initialState","status","selected","OpenWeatherMap","API_KEY","data","temp","undefined","pressure","humidity","windSpeed","Weatherbit","weatherData","state","action","type","value","newData","SourceButton","styled","div","props","Form","useState","selectedFirst","setSelectedFirst","selectedSecond","setSelectedSecond","useEffect","className","name","placeholder","onChange","e","changeCity","currentTarget","onClick","getWeatherFromOpenWeatherMap","getWeatherFromWeatherbit","alert","changeSelected","Info","Weather","getData","connect","dispatch","getState","a","res","Math","round","main","wind","speed","response","message","pres","rh","wind_spd","App","Boolean","window","location","hostname","match","combinedReducers","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.4b192ef1.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const API = {\r\n    getWeatherFromWeatherbitAPI (city, key) {\r\n        return(\r\n            axios.get(`https://api.weatherbit.io/v2.0/current?city=${city}&key=${key}`)\r\n        )\r\n    },\r\n    getWeatherFromOpenWeatherMapAPI(city, key){\r\n        return(\r\n            axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${key}`)\r\n        )\r\n    }\r\n}","import { API } from \"../api/axios-instance\";\r\n\r\nconst CHANGE_CITY = 'WD/CHANGE_CITY';\r\nconst SET_WEATHER_FROM_OWN = 'WD/SET_WEATHER_FROM_OWN';\r\nconst SET_WEATHER_FROM_WEATHER_BIT = 'SET_WEATHER_FROM_WEATHER_BIT';\r\nconst CHANGE_SELECTED = 'WD/CHANGE_SELECTED';\r\n\r\n\r\nlet initialState = {\r\n\r\n    status: 'not_init',\r\n    city: '',\r\n    selected: 'OpenWeatherMap',\r\n\r\n    OpenWeatherMap: {\r\n        API_KEY: 'afd50c82c815280ad3944fafd7c6b351',\r\n        data:{\r\n            temp: undefined,\r\n            pressure: undefined,\r\n            humidity: undefined,\r\n            windSpeed: undefined,\r\n        },\r\n    },\r\n    Weatherbit: {\r\n        API_KEY: '31c487a615d04fe8a0124e2ba29b0cca',\r\n        data: {\r\n            temp: undefined,\r\n            pressure: undefined,\r\n            humidity: undefined,\r\n            windSpeed: undefined,\r\n        },\r\n    },\r\n};\r\n\r\n\r\nexport const changeCity = (value) =>({ type: CHANGE_CITY, value: value});\r\nexport const changeSelected = (value) =>({ type: CHANGE_SELECTED, value: value});\r\n\r\nexport const setWeatherFromOWM = (temp, pressure, humidity, windSpeed) => ({ type: SET_WEATHER_FROM_OWN,\r\n    temp: temp,\r\n    pressure: pressure,\r\n    humidity: humidity,\r\n    windSpeed: windSpeed,\r\n});\r\nexport const setWeatherFromWeatherbit = (temp, pressure, humidity, windSpeed) => ({ type: SET_WEATHER_FROM_WEATHER_BIT,\r\n    temp: temp,\r\n    pressure: pressure,\r\n    humidity: humidity,\r\n    windSpeed: windSpeed,\r\n});\r\n\r\nconst weatherData = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_CITY: {\r\n            return {...state, city: action.value}\r\n        }\r\n        case SET_WEATHER_FROM_OWN: {\r\n            let newData = {\r\n                temp: action.temp,\r\n                pressure: action.pressure,\r\n                humidity: action.humidity,\r\n                windSpeed: action.windSpeed,\r\n            };\r\n            return{\r\n                ...state, OpenWeatherMap:{...state.OpenWeatherMap, data: newData}\r\n            }\r\n        }\r\n        case SET_WEATHER_FROM_WEATHER_BIT: {\r\n            let newData = {\r\n                temp: action.temp,\r\n                pressure: action.pressure,\r\n                humidity: action.humidity,\r\n                windSpeed: action.windSpeed,\r\n            };\r\n            return{\r\n                ...state, Weatherbit:{...state.Weatherbit, data: newData}\r\n            }\r\n        }\r\n        case CHANGE_SELECTED: {\r\n            return {...state, selected: action.value}\r\n        }\r\n\r\n        default: return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getWeatherFromOpenWeatherMap = () => async(dispatch, getState) => {\r\n    try {\r\n        let state = getState();\r\n        const res = await API.getWeatherFromOpenWeatherMapAPI(state.data.city, state.data.OpenWeatherMap.API_KEY)\r\n        dispatch(setWeatherFromOWM(Math.round(res.data.main.temp-273), res.data.main.pressure, res.data.main.humidity,res.data.wind.speed))\r\n    } catch(error) {\r\n        alert(error.response.data.message)\r\n    } }\r\n\r\nexport const getWeatherFromWeatherbit = () => async(dispatch, getState) => {\r\n\r\n    let state = getState();\r\n    const res = await API.getWeatherFromWeatherbitAPI(state.data.city, state.data.Weatherbit.API_KEY)\r\n    if (res.data) {\r\n        let data = res.data.data[0];\r\n        dispatch(setWeatherFromWeatherbit(Math.round(data.temp), data.pres, data.rh, data.wind_spd))}\r\n}\r\n\r\n\r\nexport default weatherData;","import styled from 'styled-components';\r\n\r\n\r\nlet SourceButton = styled.div`\r\n\r\nheight:32px;\r\nbackground-color: ${props => props.selected ? '#1C186E' : '#3B3DB8'}; \r\ntext-align: center;\r\nfont-size: 16px;\r\nborder: solid 1px black;\r\nwidth: 200px;\r\ncursor: ${props => props.selected ? 'default' : 'pointer'};\r\ncolor: white;\r\nline-height:32px;\r\nmargin-right: 10px;\r\n:hover{\r\n    background-color: #2E308E;\r\n}`\r\n\r\nexport default SourceButton;","import React, {useState, useEffect} from \"react\";\r\nimport \"./../App.css\"\r\nimport SourceButton from \"./buttonSourse\";\r\n\r\nlet Form = (props) =>{\r\n\r\n    let [selectedFirst, setSelectedFirst] = useState(false)\r\n    let [selectedSecond, setSelectedSecond] = useState(false)\r\n\r\n    useEffect(()=>{\r\n        if (props.selected === 'OpenWeatherMap' && props.temp) {\r\n            setSelectedFirst(true)\r\n        }\r\n    }, [props.temp])\r\n\r\n    let onSelectedOWM = () => {\r\n        props.changeSelected('OpenWeatherMap');\r\n        setSelectedFirst(true);\r\n        setSelectedSecond(false)\r\n    }\r\n\r\n    let onSelectedWB = () => {\r\n        props.changeSelected('Weatherbit');\r\n        setSelectedFirst(false);\r\n        setSelectedSecond(true)\r\n    }\r\n\r\n    let updateCityText = (e) =>{\r\n        props.changeCity(e.currentTarget.value)\r\n    }\r\n\r\n    let getWeather = () => {\r\n        if (props.city){\r\n            props.getWeatherFromOpenWeatherMap();\r\n            props.getWeatherFromWeatherbit();\r\n        } else {alert('введите город')}\r\n    }\r\n\r\n    return(\r\n        <form className=\"formWeath\">\r\n            <input type=\"text\" name=\"city\" placeholder=\"city\" value={props.city} onChange={updateCityText}/>\r\n            <button type=\"button\" onClick={getWeather}>Получить сводку</button>\r\n            <div className=\"source\">\r\n                <div className=\"sourceText\">\r\n                    онлайн сервис:\r\n                </div>\r\n                <div className=\"sourceButton\">\r\n                    <SourceButton selected={selectedFirst} onClick={onSelectedOWM}>Open Weather Map</SourceButton>\r\n                    <SourceButton selected={selectedSecond} onClick={onSelectedWB}>Weather Bit</SourceButton>\r\n                </div>\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport \"./../App.css\"\r\n\r\nlet Info = (props) =>{\r\n\r\n    return(<>\r\n            { props.data.temp && <div className=\"infoWeath\">\r\n                <p>температура, °C: {props.data.temp}</p>\r\n                <p>давление, мбар: {props.data.pressure}</p>\r\n                <p>влажность, %: {props.data.humidity}</p>\r\n                <p>скорость ветра, м/с: {props.data.windSpeed}</p>\r\n            </div> }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Info;","import React from \"react\";\r\nimport \"./../App.css\"\r\n\r\nlet Weather = (props) =>{\r\n    return(\r\n        <div className=\"myWeatherApp\">\r\n            <h2>Погода</h2>\r\n            <p>Узнай погоду в твоем городе!</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Weather;","export const getData = (state) => {\r\n    if (state.data.selected === 'OpenWeatherMap'){\r\n        return state.data.OpenWeatherMap.data\r\n    }\r\n    if (state.data.selected === 'Weather'){\r\n        return state.data.Weatherbit.data\r\n    }\r\n    else return state.data.OpenWeatherMap.data\r\n}","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { getWeatherFromOpenWeatherMap, changeCity, getWeatherFromWeatherbit, changeSelected } from \"../redux/weatherData\";\r\nimport Form from \"./form\";\r\nimport Weather from \"./weather\";\r\nimport Info from \"./info\";\r\nimport { getData } from \"../redux/selectors\";\r\nimport '../App.css'\r\n\r\nlet WeatherApp = (props) => {\r\n    return (\r\n        <div className=\"wrapper\">\r\n            <div className='main'>\r\n                <div className=\"row\">\r\n                    <div className=\"info\">\r\n                        <Info data={props.data} />\r\n                    </div>\r\n                    <div className=\"form\">\r\n                        <Form getWeatherFromOpenWeatherMap={props.getWeatherFromOpenWeatherMap}\r\n                              city={props.city} changeCity={props.changeCity}\r\n                              getWeatherFromWeatherbit={props.getWeatherFromWeatherbit}\r\n                              changeSelected={props.changeSelected}\r\n                              selected={props.selected}\r\n                              temp={props.data.temp}/>\r\n                        <Weather data={props.data} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    city: state.data.city,\r\n    data: getData(state),\r\n    selected: state.data.selected,\r\n})\r\n\r\nlet mapDispatchToProps = (dispatch) => ({\r\n    getWeatherFromOpenWeatherMap: () => { dispatch(getWeatherFromOpenWeatherMap()) },\r\n    changeCity: (value) => dispatch(changeCity(value)),\r\n    getWeatherFromWeatherbit: () => { dispatch(getWeatherFromWeatherbit()) },\r\n    changeSelected: (value) => dispatch(changeSelected(value))\r\n})\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherApp);","import React from 'react';\r\nimport './App.css';\r\nimport WeatherApp from './components/weatherApp';\r\n\r\nfunction App() {\r\n    return (\r\n        <div>\r\n            <WeatherApp/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport weatherData from './weatherData';\r\n\r\nlet combinedReducers = combineReducers({\r\n    data: weatherData,\r\n})\r\n\r\nlet store = createStore(combinedReducers,applyMiddleware(thunk));\r\nwindow.store = store;\r\nexport default store ;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}